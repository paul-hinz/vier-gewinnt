/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.2
// source: Game.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as Game_pb from './Game_pb';


export class GameClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetLobbies = new grpcWeb.MethodDescriptor(
    '/Game/GetLobbies',
    grpcWeb.MethodType.UNARY,
    Game_pb.Void,
    Game_pb.GetLobbiesResponse,
    (request: Game_pb.Void) => {
      return request.serializeBinary();
    },
    Game_pb.GetLobbiesResponse.deserializeBinary
  );

  getLobbies(
    request: Game_pb.Void,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.GetLobbiesResponse>;

  getLobbies(
    request: Game_pb.Void,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.GetLobbiesResponse) => void): grpcWeb.ClientReadableStream<Game_pb.GetLobbiesResponse>;

  getLobbies(
    request: Game_pb.Void,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.GetLobbiesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/GetLobbies',
        request,
        metadata || {},
        this.methodDescriptorGetLobbies,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/GetLobbies',
    request,
    metadata || {},
    this.methodDescriptorGetLobbies);
  }

  methodDescriptorCreateLobby = new grpcWeb.MethodDescriptor(
    '/Game/CreateLobby',
    grpcWeb.MethodType.UNARY,
    Game_pb.CreateLobbyRequest,
    Game_pb.CreateLobbyResponse,
    (request: Game_pb.CreateLobbyRequest) => {
      return request.serializeBinary();
    },
    Game_pb.CreateLobbyResponse.deserializeBinary
  );

  createLobby(
    request: Game_pb.CreateLobbyRequest,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.CreateLobbyResponse>;

  createLobby(
    request: Game_pb.CreateLobbyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.CreateLobbyResponse) => void): grpcWeb.ClientReadableStream<Game_pb.CreateLobbyResponse>;

  createLobby(
    request: Game_pb.CreateLobbyRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.CreateLobbyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/CreateLobby',
        request,
        metadata || {},
        this.methodDescriptorCreateLobby,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/CreateLobby',
    request,
    metadata || {},
    this.methodDescriptorCreateLobby);
  }

  methodDescriptorJoinLobby = new grpcWeb.MethodDescriptor(
    '/Game/JoinLobby',
    grpcWeb.MethodType.UNARY,
    Game_pb.JoinLobbyRequest,
    Game_pb.JoinLobbyResponse,
    (request: Game_pb.JoinLobbyRequest) => {
      return request.serializeBinary();
    },
    Game_pb.JoinLobbyResponse.deserializeBinary
  );

  joinLobby(
    request: Game_pb.JoinLobbyRequest,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.JoinLobbyResponse>;

  joinLobby(
    request: Game_pb.JoinLobbyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.JoinLobbyResponse) => void): grpcWeb.ClientReadableStream<Game_pb.JoinLobbyResponse>;

  joinLobby(
    request: Game_pb.JoinLobbyRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.JoinLobbyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/JoinLobby',
        request,
        metadata || {},
        this.methodDescriptorJoinLobby,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/JoinLobby',
    request,
    metadata || {},
    this.methodDescriptorJoinLobby);
  }

  methodDescriptorPollGameData = new grpcWeb.MethodDescriptor(
    '/Game/PollGameData',
    grpcWeb.MethodType.SERVER_STREAMING,
    Game_pb.PollRequest,
    Game_pb.ResponseStream,
    (request: Game_pb.PollRequest) => {
      return request.serializeBinary();
    },
    Game_pb.ResponseStream.deserializeBinary
  );

  pollGameData(
    request: Game_pb.PollRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<Game_pb.ResponseStream> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/Game/PollGameData',
      request,
      metadata || {},
      this.methodDescriptorPollGameData);
  }

  methodDescriptorStartGame = new grpcWeb.MethodDescriptor(
    '/Game/StartGame',
    grpcWeb.MethodType.UNARY,
    Game_pb.StartRequest,
    Game_pb.Void,
    (request: Game_pb.StartRequest) => {
      return request.serializeBinary();
    },
    Game_pb.Void.deserializeBinary
  );

  startGame(
    request: Game_pb.StartRequest,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.Void>;

  startGame(
    request: Game_pb.StartRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.Void) => void): grpcWeb.ClientReadableStream<Game_pb.Void>;

  startGame(
    request: Game_pb.StartRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/StartGame',
        request,
        metadata || {},
        this.methodDescriptorStartGame,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/StartGame',
    request,
    metadata || {},
    this.methodDescriptorStartGame);
  }

  methodDescriptorMakeMove = new grpcWeb.MethodDescriptor(
    '/Game/MakeMove',
    grpcWeb.MethodType.UNARY,
    Game_pb.MoveRequest,
    Game_pb.Void,
    (request: Game_pb.MoveRequest) => {
      return request.serializeBinary();
    },
    Game_pb.Void.deserializeBinary
  );

  makeMove(
    request: Game_pb.MoveRequest,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.Void>;

  makeMove(
    request: Game_pb.MoveRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.Void) => void): grpcWeb.ClientReadableStream<Game_pb.Void>;

  makeMove(
    request: Game_pb.MoveRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.Void) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/MakeMove',
        request,
        metadata || {},
        this.methodDescriptorMakeMove,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/MakeMove',
    request,
    metadata || {},
    this.methodDescriptorMakeMove);
  }

  methodDescriptorPostTwitter = new grpcWeb.MethodDescriptor(
    '/Game/PostTwitter',
    grpcWeb.MethodType.UNARY,
    Game_pb.TwitterRequest,
    Game_pb.TwitterSuccess,
    (request: Game_pb.TwitterRequest) => {
      return request.serializeBinary();
    },
    Game_pb.TwitterSuccess.deserializeBinary
  );

  postTwitter(
    request: Game_pb.TwitterRequest,
    metadata: grpcWeb.Metadata | null): Promise<Game_pb.TwitterSuccess>;

  postTwitter(
    request: Game_pb.TwitterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Game_pb.TwitterSuccess) => void): grpcWeb.ClientReadableStream<Game_pb.TwitterSuccess>;

  postTwitter(
    request: Game_pb.TwitterRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Game_pb.TwitterSuccess) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/PostTwitter',
        request,
        metadata || {},
        this.methodDescriptorPostTwitter,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/PostTwitter',
    request,
    metadata || {},
    this.methodDescriptorPostTwitter);
  }

}

